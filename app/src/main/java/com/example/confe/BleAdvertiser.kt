package com.example.confe

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothManager
import android.bluetooth.le.AdvertiseCallback
import android.bluetooth.le.AdvertiseData
import android.bluetooth.le.AdvertiseSettings
import android.bluetooth.le.BluetoothLeAdvertiser
import android.bluetooth.le.ScanFilter
import android.bluetooth.le.ScanSettings
import android.content.Context
import android.os.ParcelUuid
import android.util.Log
import androidx.annotation.RequiresPermission
import com.example.confe.UserIdentifier

import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import java.util.UUID

@SuppressLint("MissingPermission")
class BleAdvertiser(
    private val context: Context,
    private val identifierManager: IdentifierManager
) {

    companion object {
        private val SERVICE_UUID = UUID.fromString("0000180F-0000-1000-8000-00805F9B34FB")
        private const val ADVERTISE_DURATION_MS = 30000L
        private const val TAG = "BleAdvertiser"
    }

    private val bluetoothManager = context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
    private val bluetoothAdapter = bluetoothManager.adapter
    private val bluetoothLeAdvertiser: BluetoothLeAdvertiser? = bluetoothAdapter?.bluetoothLeAdvertiser

    private var isAdvertising = false

    private val advertiseCallback = object : AdvertiseCallback() {
        override fun onStartSuccess(settingsInEffect: AdvertiseSettings) {
            isAdvertising = true
            Log.d(TAG, "‚úÖ Advertising iniciado exitosamente")
        }

        override fun onStartFailure(errorCode: Int) {
            isAdvertising = false
            val errorMessage = when (errorCode) {
                ADVERTISE_FAILED_DATA_TOO_LARGE -> "Datos demasiado grandes"
                ADVERTISE_FAILED_TOO_MANY_ADVERTISERS -> "Demasiados advertisers activos"
                ADVERTISE_FAILED_ALREADY_STARTED -> "Advertising ya iniciado"
                ADVERTISE_FAILED_INTERNAL_ERROR -> "Error interno"
                ADVERTISE_FAILED_FEATURE_UNSUPPORTED -> "Caracter√≠stica no soportada"
                else -> "Error desconocido: $errorCode"
            }
            Log.e(TAG, "‚ùå Advertising fall√≥: $errorMessage (c√≥digo: $errorCode)")
        }
    }

    // Funci√≥n para convertir bytes a string hexadecimal legible
    private fun bytesToHex(bytes: ByteArray): String {
        return bytes.joinToString(" ") { byte -> "%02X".format(byte) }
    }

    // Funci√≥n para mostrar la estructura completa del advertising packet
    private fun logAdvertisingPacketStructure(identifierBytes: ByteArray) {
        Log.d(TAG, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        Log.d(TAG, "üì¶ ESTRUCTURA DEL ADVERTISING PACKET")
        Log.d(TAG, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

        // 1. Informaci√≥n del Service UUID
        Log.d(TAG, "üîµ SERVICE UUID:")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ UUID Completo: $SERVICE_UUID")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ UUID Comprimido (16-bit): 180F")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ Bytes en advertising: [0F 18] (2 bytes)")

        // 2. Informaci√≥n de los datos del identificador
        Log.d(TAG, "üÜî IDENTIFIER DATA:")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ Tama√±o: ${identifierBytes.size} bytes")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ Contenido (HEX): ${bytesToHex(identifierBytes)}")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ Contenido (String): ${String(identifierBytes, Charsets.UTF_8).take(20)}...")

        // 3. C√°lculo estimado del tama√±o total
        val flagsSize = 3  // Flags standard BLE
        val uuidSize = 4   // 2 bytes UUID + 2 bytes header
        val serviceDataHeaderSize = 2  // Header para service data
        val serviceDataSize = identifierBytes.size
        val totalEstimated = flagsSize + uuidSize + serviceDataHeaderSize + serviceDataSize

        Log.d(TAG, "üìä C√ÅLCULO DE TAMA√ëO:")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ Flags: $flagsSize bytes")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ Service UUID: $uuidSize bytes (2 + 2 header)")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ Service Data Header: $serviceDataHeaderSize bytes")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ Service Data Payload: $serviceDataSize bytes")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ TOTAL ESTIMADO: $totalEstimated bytes (m√°ximo: 31 bytes)")

        if (totalEstimated > 31) {
            Log.w(TAG, "‚ö†Ô∏è  ADVERTENCIA: Tama√±o excede el l√≠mite de 31 bytes!")
        } else {
            Log.d(TAG, "‚úÖ Tama√±o dentro del l√≠mite permitido")
        }

        // 4. Lo que ver√≠a un scanner
        Log.d(TAG, "üîç LO QUE VER√çA UN SCANNER:")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ Device Address: XX:XX:XX:XX:XX:XX (MAC address)")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ RSSI: -XX dBm (se√±al de fuerza)")
        Log.d(TAG, "   ‚îú‚îÄ‚îÄ Service UUID: 0000180F-0000-1000-8000-00805F9B34FB")
        Log.d(TAG, "   ‚îî‚îÄ‚îÄ Service Data: ${bytesToHex(identifierBytes)}")

        Log.d(TAG, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    }

    // FUNCI√ìN PARA VERIFICAR PERMISOS
    private fun hasAdvertisePermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH_ADVERTISE
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            true // En versiones anteriores a Android 12, no se necesita este permiso espec√≠fico
        }
    }

    fun startAdvertising() {
        // VERIFICAR PERMISOS ANTES DE CONTINUAR
        if (!hasAdvertisePermission()) {
            Log.e(TAG, "‚ùå Permiso BLUETOOTH_ADVERTISE no concedido")
            return
        }

        if (!isBluetoothEnabled()) {
            Log.e(TAG, "Bluetooth no est√° habilitado o no soporta advertising")
            return
        }

        if (isAdvertising) {
            Log.w(TAG, "Ya est√° transmitiendo")
            return
        }

        Log.d(TAG, "üöÄ Iniciando advertising BLE...")

        try {
            val settings = AdvertiseSettings.Builder()
                .setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER)
                .setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_LOW)
                .setConnectable(false)
                .setTimeout(ADVERTISE_DURATION_MS.toInt())
                .build()

            val identifierBytes = UserIdentifier.toBytes()

            // LOG DETALLADO DE LA ESTRUCTURA DEL PACKET
            logAdvertisingPacketStructure(identifierBytes)

            val data = AdvertiseData.Builder()
                .setIncludeDeviceName(false)
                .setIncludeTxPowerLevel(false)
                .addServiceUuid(ParcelUuid(SERVICE_UUID))
                .addServiceData(ParcelUuid(SERVICE_UUID), identifierBytes)
                .build()

            Log.d(TAG, "üì° Iniciando transmisi√≥n con configuraci√≥n:")
            Log.d(TAG, "   ‚îú‚îÄ‚îÄ Modo: LOW_POWER")
            Log.d(TAG, "   ‚îú‚îÄ‚îÄ Potencia TX: LOW")
            Log.d(TAG, "   ‚îú‚îÄ‚îÄ Conectable: NO")
            Log.d(TAG, "   ‚îî‚îÄ‚îÄ Duraci√≥n: ${ADVERTISE_DURATION_MS/1000} segundos")

            bluetoothLeAdvertiser?.startAdvertising(settings, data, advertiseCallback)
            scheduleStopAdvertising()

        } catch (e: SecurityException) {
            Log.e(TAG, "üí• SecurityException: Permisos insuficientes - ${e.message}")
        } catch (e: Exception) {
            Log.e(TAG, "üí• Error al iniciar advertising: ${e.message}")
        }
    }

    fun stopAdvertising() {
        if (!isAdvertising) return

        // VERIFICAR PERMISOS ANTES DE DETENER
        if (!hasAdvertisePermission()) {
            Log.e(TAG, "‚ùå Permiso BLUETOOTH_ADVERTISE no concedido para detener")
            return
        }

        Log.d(TAG, "üõë Deteniendo advertising BLE...")
        try {
            bluetoothLeAdvertiser?.stopAdvertising(advertiseCallback)
            isAdvertising = false
            Log.d(TAG, "‚úÖ Advertising detenido")
        } catch (e: SecurityException) {
            Log.e(TAG, "SecurityException al detener: ${e.message}")
        } catch (e: Exception) {
            Log.e(TAG, "Error deteniendo advertising: ${e.message}")
        }
    }

    fun isBluetoothEnabled(): Boolean {
        val enabled = bluetoothAdapter?.isEnabled == true &&
                bluetoothLeAdvertiser != null &&
                bluetoothAdapter.isMultipleAdvertisementSupported

        Log.d(TAG, "üîµ Bluetooth habilitado: $enabled")
        return enabled
    }

    fun isCurrentlyAdvertising(): Boolean {
        return isAdvertising
    }

    fun rotateAndRestartAdvertising() {
        Log.d(TAG, "üîÑ Rotando identificador y reiniciando advertising...")
        val wasAdvertising = isAdvertising
        if (wasAdvertising) {
            stopAdvertising()
        }

        identifierManager.rotateIdentifier()

        if (wasAdvertising) {
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                startAdvertising()
            }, 100)
        }
    }

    private fun scheduleStopAdvertising() {
        android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
            stopAdvertising()
        }, ADVERTISE_DURATION_MS)
    }
}

// ================================================================
// SOLUCI√ìN 2: BleScanner con verificaci√≥n de permisos
// ================================================================

/*
class BleScanner(
    private val context: Context,
    private val onDeviceDetected: (UserIdentifier, Int, Long) -> Unit
) {

    companion object {
        private val SERVICE_UUID = UUID.fromString("6E400001-B5A3-F393-E0A9-E50E24DCCA9E")
        private const val SCAN_DURATION_MS = 30000L
        private const val TAG = "BleScanner"
    }

    private val bluetoothManager = context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
    private val bluetoothAdapter = bluetoothManager.adapter
    private val bluetoothLeScanner: BluetoothLeScanner? = bluetoothAdapter?.bluetoothLeScanner

    private var isScanning = false
    private val detectedDevices = mutableMapOf<String, DeviceDetection>()

    // FUNCI√ìN PARA VERIFICAR PERMISOS DE ESCANEO
    private fun hasScanPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH_SCAN
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        }
    }

    private val scanCallback = object : ScanCallback() {
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            Log.d(TAG, "Dispositivo detectado: ${result.device.address}, RSSI: ${result.rssi}")
            handleScanResult(result)
        }

        override fun onBatchScanResults(results: MutableList<ScanResult>) {
            Log.d(TAG, "Batch scan results: ${results.size} dispositivos")
            results.forEach { handleScanResult(it) }
        }

        override fun onScanFailed(errorCode: Int) {
            isScanning = false
            Log.e(TAG, "Scan fall√≥ con c√≥digo: $errorCode")
        }
    }

    fun startScanning() {
        // VERIFICAR PERMISOS ANTES DE ESCANEAR
        if (!hasScanPermission()) {
            Log.e(TAG, "‚ùå Permisos de BLUETOOTH_SCAN no concedidos")
            return
        }

        if (!isBluetoothEnabled()) {
            Log.e(TAG, "Bluetooth no est√° habilitado")
            return
        }

        if (isScanning) {
            Log.w(TAG, "Ya est√° escaneando")
            return
        }

        Log.d(TAG, "üîç Iniciando escaneo BLE...")

        try {
            val scanFilter = ScanFilter.Builder()
                .setServiceUuid(ParcelUuid(SERVICE_UUID))
                .build()

            val scanSettings = ScanSettings.Builder()
                .setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)
                .setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES)
                .setMatchMode(ScanSettings.MATCH_MODE_AGGRESSIVE)
                .setNumOfMatches(ScanSettings.MATCH_NUM_MAX_ADVERTISEMENT)
                .setReportDelay(0L)
                .build()

            bluetoothLeScanner?.startScan(listOf(scanFilter), scanSettings, scanCallback)
            isScanning = true
            scheduleStopScanning()
            Log.d(TAG, "‚úÖ Escaneo iniciado exitosamente")

        } catch (e: SecurityException) {
            Log.e(TAG, "üí• SecurityException: Permisos insuficientes - ${e.message}")
        } catch (e: Exception) {
            Log.e(TAG, "üí• Error al iniciar escaneo: ${e.message}")
        }
    }

    fun stopScanning() {
        if (!isScanning) return

        if (!hasScanPermission()) {
            Log.e(TAG, "‚ùå Permisos de BLUETOOTH_SCAN no concedidos para detener")
            return
        }

        Log.d(TAG, "üõë Deteniendo escaneo BLE...")
        try {
            bluetoothLeScanner?.stopScan(scanCallback)
            isScanning = false
            processDetectedDevices()
            detectedDevices.clear()
            Log.d(TAG, "‚úÖ Escaneo detenido")
        } catch (e: SecurityException) {
            Log.e(TAG, "SecurityException al detener escaneo: ${e.message}")
        } catch (e: Exception) {
            Log.e(TAG, "Error deteniendo escaneo: ${e.message}")
        }
    }

    // ... resto del c√≥digo igual
}
*/

// ================================================================
// SOLUCI√ìN 3: Alternativa simple - usar @SuppressLint
// ================================================================

/*
import android.annotation.SuppressLint

@SuppressLint("MissingPermission")
class BleAdvertiser(
    private val context: Context,
    private val identifierManager: IdentifierManager
) {
    // Todo tu c√≥digo actual sin cambios
    // Esta anotaci√≥n suprime las advertencias de permisos
}
*/